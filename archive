#!/bin/bash
###############################################################################
# Scripts archiveren.
#
# Geschreven door Karel Zimmer <info@karelzimmer.nl>.
###############################################################################
set -o errexit
set -o nounset

###############################################################################
# Global constants
###############################################################################

readonly archive_from=$HOME/kz-uploads/dist/data/linux
readonly archive_to=$HOME/kz-uploads/app/data/linux-archief
readonly delete_from_1=$HOME/kz-scripts
readonly delete_from_2=$HOME/kz-docs
readonly delete_from_3=$HOME/kz-deb

###############################################################################
# Global variables
###############################################################################

declare archived=false
declare argument_selection=false
declare deleted=false
declare -a selection_argument=()

# Terminalattributen, zie 'man terminfo'.  Gebruik ${<variabele-naam>}.
declare rewrite_line=''

###############################################################################
# Functions
###############################################################################

function check_input {
    local -i    search4_arg_num=0
    local       dir=''

    while [[ "$*" ]]; do
        argument_selection=true
        selection_argument[$search4_arg_num]=$(basename "$1")
        ((++search4_arg_num))
        shift
    done

    for dir in  "$archive_from"     \
                "$archive_to"       \
                "$delete_from_1"    \
                "$delete_from_2"    \
                "$delete_from_3"; do
        if ! [[ -d $dir ]]; then
            printf '%s\n' "Map '$dir' bestaat niet."
            exit 1
        fi
    done

    if [[ -t 1 ]]; then
        rewrite_line=$(tput cuu1;tput el)
    fi

    request_input
}


function request_input {
    if $argument_selection; then
        return 0
    fi
    read -rp 'Wat archiveren/verwijderen? [leeg=alles]: '
    selection_argument[0]=$REPLY
}


function process_input {
    local basename=''
    local dirname=''
    local files_found=false
    local search4=''

    for search4 in "${selection_argument[@]}"; do
        while read -r file; do

            files_found=true

            dirname=$(dirname   "$file")
            basename=$(basename "$file")

            if [[ $dirname == $archive_from* ]]; then
                process_archive
            else
                process_delete
            fi
        done < <(
            find    "$archive_from"         \
                    "$delete_from_1"        \
                    "$delete_from_2"        \
                    "$delete_from_3"        \
                    -iname                  \
                    '*'"$search4"'*'        \
                    -not -path '*/.git/*'   \
                    -type f                 \
                    -print                  |
                    sort
            )
        if ! $files_found; then
            printf '%s\n' "Geen bestanden gevonden met '$search4' in de naam."
        fi
        files_found=false
    done

}


function process_archive {
    printf '%s\n' "
$basename
$dirname"
    while true; do
        # < /dev/tty want FD 1 al in gebruik door for-while constructie.
        read -rp 'archiveren/verwijderen/Overslaan/stoppen? [a/v/O/s]: ' < \
/dev/tty
        case $REPLY in
            a*|A*)
                archive_file
                break
                ;;
            v*|V*)
                delete_file
                break
                ;;
            o*|O*|'')
               printf '%s\n' 'Overgeslagen.'
                break
                ;;
            s*|S*)
                printf '%s\n' 'Gestopt.'
                exit 0
                ;;
            *)
                printf '%s' "${rewrite_line}"
                continue
                ;;
        esac
    done
}


function archive_file {
    local olddir=''
    local newdir=''

    olddir=$dirname
    newdir=${olddir//dist/app}
    newdir=${newdir//linux/linux-archief}
    mv "$olddir/$basename" "$newdir"
    printf '%s\n' 'Gearchiveerd.'
    archived=true
}


function process_delete {
    printf '%s\n' "
$basename
$dirname"
    while true; do
        # < /dev/tty want FD 1 al in gebruik door for-while constructie.
        read -rp 'verwijderen/Overslaan/stoppen? [v/O/s]: ' < /dev/tty
        case $REPLY in
            v*|V*)
                delete_file
                break
                ;;
            o*|O*|'')
                printf '%s\n' 'Overgeslagen.'
                break
                ;;
            s*|S*)
                printf '%s\n' 'Gestopt.'
                exit 0
                ;;
            *)
                printf '%s' "${rewrite_line}"
                continue
                ;;
        esac
    done
}


function delete_file {
    rm "$file"
    printf '%s\n' 'Verwijderd.'
    deleted=true
}


function term_script {
    if $deleted; then
        TEXT="\nEr zijn bestanden verwijderd."
    else
        TEXT="\nEr zijn geen bestanden verwijderd."
    fi
    if $archived; then
        TEXT+="\nEr zijn bestanden gearchiveerd."
    else
        TEXT+="\nEr zijn geen bestanden gearchiveerd."
    fi
    printf '%b\n' "$TEXT"
    if  $deleted || $archived; then
        printf '%s\n' 'Pas website aan en commit de wijzigingen!'
    fi
    exit 0
}

###############################################################################
# Script
###############################################################################

function main {
    check_input "$@"
    process_input
    term_script
}

main "$@"
